// <auto-generated />
using System;
using Accounting.Contract;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Accounting.Contract.Migrations
{
    [DbContext(typeof(AccountingDatabase))]
    [Migration("20250416070557_Change_StiVatReturnDeclaration_IsCancelled_Field")]
    partial class Change_StiVatReturnDeclaration_IsCancelled_Field
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Accounting.Contract.Entity.ButentaTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeclarationId")
                        .IsRequired()
                        .HasColumnType("varchar(34)");

                    b.HasKey("Id");

                    b.HasIndex("DeclarationId");

                    b.ToTable("ButentaTrades");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdentityDocumentIssuedBy")
                        .HasColumnType("int");

                    b.Property<string>("IdentityDocumentNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdentityDocumentType")
                        .HasColumnType("int");

                    b.Property<string>("IdentityDocumentValue")
                        .HasColumnType("longtext");

                    b.Property<int?>("InstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ResidenceCountry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.CustomerOtherDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("IssuedBy")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOtherDocuments");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DataEntries");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataEntryField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataEntryId")
                        .HasColumnType("int");

                    b.Property<int>("DataTypeFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DataEntryId");

                    b.HasIndex("DataTypeFieldId");

                    b.ToTable("DataEntryFields");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DisplayFieldId")
                        .HasColumnType("int");

                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("DataTypes");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataTypeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("DataTypeFields");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.ImportConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.ToTable("ImportConfigurations");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.ImportConfigurationField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("DataTypeFieldId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("DataTypeFieldId");

                    b.ToTable("ImportConfigurationFields");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Instances");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.InstanceUserMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("InstanceUserMetas");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CashRegisterNo")
                        .HasColumnType("longtext");

                    b.Property<string>("CashRegisterReceiptNo")
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("InstanceId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SalesmanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InstanceId");

                    b.HasIndex("SalesmanId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Salesman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VatPayerCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VatPayerCodeIssuedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Salesmen");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.SoldGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UnitOfMeasureType")
                        .HasColumnType("int");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SoldGoods");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclaration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<int>("Correction")
                        .HasColumnType("int");

                    b.Property<int?>("DeclaredById")
                        .HasColumnType("int");

                    b.Property<int?>("InstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DeclaredById");

                    b.HasIndex("InstanceId");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("StiVatReturnDeclarations");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CorrectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomsOfficeCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DeclarationCorrectionNo")
                        .HasColumnType("int");

                    b.Property<string>("DeclarationId")
                        .IsRequired()
                        .HasColumnType("varchar(34)");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VerificationResult")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeclarationId")
                        .IsUnique();

                    b.ToTable("StiVatReturnDeclarationExports");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExportAssessmentCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMet")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ExportId");

                    b.ToTable("StiVatReturnDeclarationExportAssessmentConditions");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExportVerifiedGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("QuantityVerified")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UnitOfMeasureType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExportId");

                    b.ToTable("StiVatReturnDeclarationExportVerifiedGoods");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationQrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeclarationId")
                        .IsRequired()
                        .HasColumnType("varchar(34)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DeclarationId");

                    b.ToTable("StiVatReturnDeclarationQrCodes");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailNormalized")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.ButentaTrade", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.StiVatReturnDeclaration", "Declaration")
                        .WithMany()
                        .HasForeignKey("DeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Customer", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.CustomerOtherDocument", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Customer", "Customer")
                        .WithMany("OtherDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataEntry", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.DataType", "DataType")
                        .WithMany("Entries")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DataType");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataEntryField", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.DataEntry", "DataEntry")
                        .WithMany("Fields")
                        .HasForeignKey("DataEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.DataTypeField", "DataTypeField")
                        .WithMany()
                        .HasForeignKey("DataTypeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataEntry");

                    b.Navigation("DataTypeField");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataType", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataTypeField", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.DataType", "DataType")
                        .WithMany("Fields")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.DataType", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId");

                    b.Navigation("DataType");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.ImportConfiguration", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.ImportConfigurationField", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.ImportConfiguration", "Configuration")
                        .WithMany("Fields")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.DataTypeField", "DataTypeField")
                        .WithMany()
                        .HasForeignKey("DataTypeFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("DataTypeField");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Instance", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.User", "CreatedBy")
                        .WithMany("InstancesCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.InstanceUserMeta", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Instance", "Instance")
                        .WithMany("UserMetas")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.User", "User")
                        .WithMany("InstanceUserMetas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Sale", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Contract.Entity.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Accounting.Contract.Entity.Salesman", "Salesman")
                        .WithMany("Sales")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Instance");

                    b.Navigation("Salesman");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Salesman", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Session", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.SoldGood", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.Sale", "Sale")
                        .WithMany("SoldGoods")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclaration", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.User", "DeclaredBy")
                        .WithMany()
                        .HasForeignKey("DeclaredById");

                    b.HasOne("Accounting.Contract.Entity.Instance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId");

                    b.HasOne("Accounting.Contract.Entity.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaredBy");

                    b.Navigation("Instance");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExport", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.StiVatReturnDeclaration", "Declaration")
                        .WithOne("Export")
                        .HasForeignKey("Accounting.Contract.Entity.StiVatReturnDeclarationExport", "DeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExportAssessmentCondition", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.StiVatReturnDeclarationExport", "Export")
                        .WithMany("Conditions")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExportVerifiedGood", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.StiVatReturnDeclarationExport", "Export")
                        .WithMany("VerifiedSoldGoods")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationQrCode", b =>
                {
                    b.HasOne("Accounting.Contract.Entity.StiVatReturnDeclaration", "Declaration")
                        .WithMany("QrCodes")
                        .HasForeignKey("DeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Customer", b =>
                {
                    b.Navigation("OtherDocuments");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataEntry", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.DataType", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.ImportConfiguration", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Instance", b =>
                {
                    b.Navigation("UserMetas");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Sale", b =>
                {
                    b.Navigation("SoldGoods");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.Salesman", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclaration", b =>
                {
                    b.Navigation("Export");

                    b.Navigation("QrCodes");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.StiVatReturnDeclarationExport", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("VerifiedSoldGoods");
                });

            modelBuilder.Entity("Accounting.Contract.Entity.User", b =>
                {
                    b.Navigation("InstanceUserMetas");

                    b.Navigation("InstancesCreated");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
